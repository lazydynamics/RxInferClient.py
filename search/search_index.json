{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RxInfer Client","text":"<p>A Python client for interacting with RxInferServer.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Simple and intuitive API</li> <li>Type hints for better IDE support</li> <li>Comprehensive documentation</li> <li>Built on top of OpenAPI specification</li> <li>Automatic API key generation</li> <li>Configurable server URL</li> <li>Organized functionality through logical subfields</li> </ul>"},{"location":"#client-structure","title":"Client Structure","text":"<p>The client functionality is organized into several subfields: - <code>server</code>: Access to server-related operations (e.g., ping, health checks) - <code>authentication</code>: Authentication and token management - <code>models</code>: Model management and operations (create, delete, etc.)</p>"},{"location":"#quick-examples","title":"Quick Examples","text":"<pre><code>from rxinferclient import RxInferClient\n\n# Initialize with default settings\nclient = RxInferClient()\n\n# Or with custom server URL\nclient = RxInferClient(server_url=\"http://localhost:8000/v1\")\n\n# Check server status\nresponse = client.server.ping_server()\nassert response.status == 'ok'\n\n# Work with models\nresponse = client.models.create_model_instance({\n    \"model_name\": \"BetaBernoulli-v1\",\n})\ninstance_id = response.instance_id\n\n# Clean up\nclient.models.delete_model_instance(instance_id=instance_id)\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Installation - How to install the client</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":""},{"location":"#rxinferclient.wrapper.client.RxInferClient","title":"<code>RxInferClient(api_key=None, server_url=None)</code>","text":"<p>High-level client for the RxInfer API.</p> <p>This class provides a more user-friendly interface to the RxInfer API, wrapping the auto-generated client code.</p> The client functionality is organized into several subfields <ul> <li>server: Access to server-related operations via ServerApi</li> <li>authentication: Authentication and token management via AuthenticationApi</li> <li>models: Model management and operations via ModelsApi</li> </ul> <p>Examples:</p> <p>Initialize the client (will auto-generate API key if not provided):</p> <pre><code>&gt;&gt;&gt; client = RxInferClient()\n</code></pre> <p>Initialize with custom server URL:</p> <pre><code>&gt;&gt;&gt; client = RxInferClient(server_url=\"http://localhost:8000/v1\")\n</code></pre> <p>Check server status:</p> <pre><code>&gt;&gt;&gt; response = client.server.ping_server()\n&gt;&gt;&gt; assert response.status == 'ok'\n</code></pre> <p>Create and manage model instances:</p> <pre><code>&gt;&gt;&gt; # Create a new model instance\n&gt;&gt;&gt; response = client.models.create_model_instance({\n...     \"model_name\": \"BetaBernoulli-v1\",\n... })\n&gt;&gt;&gt; instance_id = response.instance_id\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Delete the model instance when done\n&gt;&gt;&gt; client.models.delete_model_instance(instance_id=instance_id)\n</code></pre> <p>Initialize the RxInfer client.</p> PARAMETER DESCRIPTION <code>api_key</code> <p>Optional API key for authentication. If not provided,     the client will attempt to generate a temporary API key.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>server_url</code> <p>Optional server URL. If provided, overrides the default        server URL configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.9 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#from-pypi","title":"From PyPI","text":"<p>The easiest way to install RxInferClient is using pip:</p> <pre><code>pip install rxinferclient\n</code></pre>"},{"location":"installation/#from-source","title":"From Source","text":"<p>If you want to install the latest development version or contribute to the project:</p> <ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/lazydynamics/RxInferClient.py.git\ncd RxInferClient.py\n</code></pre></p> </li> <li> <p>Create and activate a virtual environment (recommended):    <pre><code># On Unix/macOS\npython -m venv venv\nsource venv/bin/activate\n\n# On Windows\npython -m venv venv\nvenv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install the package in development mode with all dependencies:    <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> </ol>"},{"location":"installation/#development-setup","title":"Development Setup","text":"<p>For development, you'll need additional tools. The development setup includes:</p> <ol> <li> <p>Install development dependencies:    <pre><code>make install-dev\n</code></pre></p> </li> <li> <p>Generate the OpenAPI client code:    <pre><code>make generate-client\n</code></pre></p> </li> <li> <p>Run tests to verify the installation:    <pre><code>make test\n</code></pre></p> </li> </ol>"},{"location":"examples/state-space-model/","title":"Inference in State Space Models","text":"In\u00a0[1]: Copied! <pre>from rxinferclient import RxInferClient\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Initialize the client\nclient = RxInferClient()\n</pre> from rxinferclient import RxInferClient import numpy as np import matplotlib.pyplot as plt  # Initialize the client client = RxInferClient() In\u00a0[2]: Copied! <pre>def generate_rotate_ssm_data(n, k, split=0.8, seed=42):\n    np.random.seed(seed)\n    theta = np.pi / k\n    A = np.array([[np.cos(theta), -np.sin(theta)], [np.sin(theta), np.cos(theta)]])\n    Q = np.eye(2)\n    P = np.eye(2)\n    \n    x_prev = np.ones(2)\n    x = np.zeros((n, 2))\n    y = np.zeros((n, 2))\n\n    for i in range(n):\n        x[i] = np.random.multivariate_normal(A @ x_prev, Q)\n        y[i] = np.random.multivariate_normal(x[i], P)\n        x_prev = x[i]\n\n    split_idx = int(n * split)\n    x_train = x[:split_idx]\n    y_train = y[:split_idx]\n    x_test = x[split_idx:]\n    y_test = y[split_idx:]\n\n    return x_train, y_train, x_test, y_test\n\ndef plot_dimension(x_train, y_train, x_test, y_test, dimension):\n    train_indices = np.arange(len(y_train))\n    test_indices = np.arange(len(y_train), len(y_train) + len(y_test))\n    \n    plt.figure(figsize=(10, 6))\n    plt.plot(train_indices, x_train[:, dimension], label=\"states (training set)\", linewidth=2)\n    plt.scatter(train_indices, y_train[:, dimension], label=\"observations (training set)\", s=4)\n    plt.plot(test_indices, x_test[:, dimension], label=\"states (test set)\", linewidth=2)\n    plt.scatter(test_indices, y_test[:, dimension], label=\"observations (test set)\", s=4)\n    plt.legend(loc='lower left')\n    return plt.gcf()\n\ndef load_dataset():\n    x_train, y_train, x_test, y_test = generate_rotate_ssm_data(400, 8)\n    return {\"x_train\": x_train, \"y_train\": y_train, \"x_test\": x_test, \"y_test\": y_test}\n\ndef plot_dataset(dataset):\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12))\n    \n    # Plot first dimension\n    train_indices = np.arange(len(dataset[\"y_train\"]))\n    test_indices = np.arange(len(dataset[\"y_train\"]), len(dataset[\"y_train\"]) + len(dataset[\"y_test\"]))\n    \n    ax1.plot(train_indices, dataset[\"x_train\"][:, 0], label=\"states (training set)\", linewidth=2)\n    ax1.scatter(train_indices, dataset[\"y_train\"][:, 0], label=\"observations (training set)\", s=20, alpha=0.7)\n    ax1.plot(test_indices, dataset[\"x_test\"][:, 0], label=\"states (test set)\", linewidth=2)\n    ax1.scatter(test_indices, dataset[\"y_test\"][:, 0], label=\"observations (test set)\", s=20, alpha=0.7)\n    ax1.legend(loc='lower left')\n    \n    # Plot second dimension\n    ax2.plot(train_indices, dataset[\"x_train\"][:, 1], label=\"states (training set)\", linewidth=2)\n    ax2.scatter(train_indices, dataset[\"y_train\"][:, 1], label=\"observations (training set)\", s=20, alpha=0.7)\n    ax2.plot(test_indices, dataset[\"x_test\"][:, 1], label=\"states (test set)\", linewidth=2)\n    ax2.scatter(test_indices, dataset[\"y_test\"][:, 1], label=\"observations (test set)\", s=20, alpha=0.7)\n    ax2.legend(loc='lower left')\n    \n    return fig\n</pre> def generate_rotate_ssm_data(n, k, split=0.8, seed=42):     np.random.seed(seed)     theta = np.pi / k     A = np.array([[np.cos(theta), -np.sin(theta)], [np.sin(theta), np.cos(theta)]])     Q = np.eye(2)     P = np.eye(2)          x_prev = np.ones(2)     x = np.zeros((n, 2))     y = np.zeros((n, 2))      for i in range(n):         x[i] = np.random.multivariate_normal(A @ x_prev, Q)         y[i] = np.random.multivariate_normal(x[i], P)         x_prev = x[i]      split_idx = int(n * split)     x_train = x[:split_idx]     y_train = y[:split_idx]     x_test = x[split_idx:]     y_test = y[split_idx:]      return x_train, y_train, x_test, y_test  def plot_dimension(x_train, y_train, x_test, y_test, dimension):     train_indices = np.arange(len(y_train))     test_indices = np.arange(len(y_train), len(y_train) + len(y_test))          plt.figure(figsize=(10, 6))     plt.plot(train_indices, x_train[:, dimension], label=\"states (training set)\", linewidth=2)     plt.scatter(train_indices, y_train[:, dimension], label=\"observations (training set)\", s=4)     plt.plot(test_indices, x_test[:, dimension], label=\"states (test set)\", linewidth=2)     plt.scatter(test_indices, y_test[:, dimension], label=\"observations (test set)\", s=4)     plt.legend(loc='lower left')     return plt.gcf()  def load_dataset():     x_train, y_train, x_test, y_test = generate_rotate_ssm_data(400, 8)     return {\"x_train\": x_train, \"y_train\": y_train, \"x_test\": x_test, \"y_test\": y_test}  def plot_dataset(dataset):     fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12))          # Plot first dimension     train_indices = np.arange(len(dataset[\"y_train\"]))     test_indices = np.arange(len(dataset[\"y_train\"]), len(dataset[\"y_train\"]) + len(dataset[\"y_test\"]))          ax1.plot(train_indices, dataset[\"x_train\"][:, 0], label=\"states (training set)\", linewidth=2)     ax1.scatter(train_indices, dataset[\"y_train\"][:, 0], label=\"observations (training set)\", s=20, alpha=0.7)     ax1.plot(test_indices, dataset[\"x_test\"][:, 0], label=\"states (test set)\", linewidth=2)     ax1.scatter(test_indices, dataset[\"y_test\"][:, 0], label=\"observations (test set)\", s=20, alpha=0.7)     ax1.legend(loc='lower left')          # Plot second dimension     ax2.plot(train_indices, dataset[\"x_train\"][:, 1], label=\"states (training set)\", linewidth=2)     ax2.scatter(train_indices, dataset[\"y_train\"][:, 1], label=\"observations (training set)\", s=20, alpha=0.7)     ax2.plot(test_indices, dataset[\"x_test\"][:, 1], label=\"states (test set)\", linewidth=2)     ax2.scatter(test_indices, dataset[\"y_test\"][:, 1], label=\"observations (test set)\", s=20, alpha=0.7)     ax2.legend(loc='lower left')          return fig <p>The visualization below shows both the true states and their corresponding noisy observations for both training and test periods.</p> In\u00a0[3]: Copied! <pre>dataset = load_dataset()\nfig = plot_dataset(dataset)\nplt.show()\n</pre> dataset = load_dataset() fig = plot_dataset(dataset) plt.show() In\u00a0[4]: Copied! <pre>response = client.models.create_model_instance({\n    \"model_name\": \"LinearStateSpaceModel-v1\",\n    \"description\": \"Example model for demonstration\",\n    \"arguments\": {\n        \"state_dimension\": 2,\n        \"horizon\": len(dataset[\"x_test\"])\n    }\n})\ninstance_id = response.instance_id\n</pre> response = client.models.create_model_instance({     \"model_name\": \"LinearStateSpaceModel-v1\",     \"description\": \"Example model for demonstration\",     \"arguments\": {         \"state_dimension\": 2,         \"horizon\": len(dataset[\"x_test\"])     } }) instance_id = response.instance_id In\u00a0[5]: Copied! <pre>response = client.models.get_episodes(instance_id)\nprint(response)\n</pre> response = client.models.get_episodes(instance_id) print(response) <pre>[EpisodeInfo(instance_id='2be7cc46-9d2f-48cc-8c15-7707a63358d6', episode_name='default', created_at=datetime.datetime(2025, 4, 9, 12, 5, 45, 990000, tzinfo=TzInfo(UTC)), events=[])]\n</pre> In\u00a0[6]: Copied! <pre>response = client.models.get_episode_info(instance_id, \"default\")\nprint(response)\n</pre> response = client.models.get_episode_info(instance_id, \"default\") print(response) <pre>instance_id='2be7cc46-9d2f-48cc-8c15-7707a63358d6' episode_name='default' created_at=datetime.datetime(2025, 4, 9, 12, 5, 45, 990000, tzinfo=TzInfo(UTC)) events=[]\n</pre> <p>As we can see, the <code>default</code> episode has no events since we haven't loaded any data into it yet nor run any inference.</p> In\u00a0[7]: Copied! <pre>response = client.models.create_episode(instance_id, {\n    \"name\": \"experiment-1\"\n})\nprint(response)\n</pre> response = client.models.create_episode(instance_id, {     \"name\": \"experiment-1\" }) print(response) <pre>instance_id='2be7cc46-9d2f-48cc-8c15-7707a63358d6' episode_name='experiment-1' created_at=datetime.datetime(2025, 4, 9, 12, 5, 48, 535000, tzinfo=TzInfo(UTC)) events=[]\n</pre> <p>To confirm the new episode has been added to the list:</p> In\u00a0[8]: Copied! <pre>response = client.models.get_episodes(instance_id)\nprint(response)\n</pre> response = client.models.get_episodes(instance_id) print(response) <pre>[EpisodeInfo(instance_id='2be7cc46-9d2f-48cc-8c15-7707a63358d6', episode_name='default', created_at=datetime.datetime(2025, 4, 9, 12, 5, 45, 990000, tzinfo=TzInfo(UTC)), events=[]), EpisodeInfo(instance_id='2be7cc46-9d2f-48cc-8c15-7707a63358d6', episode_name='experiment-1', created_at=datetime.datetime(2025, 4, 9, 12, 5, 48, 535000, tzinfo=TzInfo(UTC)), events=[])]\n</pre> In\u00a0[9]: Copied! <pre># Create events with data\nevents = [{\"data\": {\"observation\": y.tolist()}} for y in dataset[\"y_train\"]]\n\n# Attach events to an episode\nresponse = client.models.attach_events_to_episode(instance_id, \"experiment-1\", {\n    \"events\": events\n})\nprint(response)\n</pre> # Create events with data events = [{\"data\": {\"observation\": y.tolist()}} for y in dataset[\"y_train\"]]  # Attach events to an episode response = client.models.attach_events_to_episode(instance_id, \"experiment-1\", {     \"events\": events }) print(response) <pre>message='Events attached to the episode successfully'\n</pre> <p>To verify that your data was loaded correctly:</p> In\u00a0[10]: Copied! <pre>response = client.models.get_episode_info(instance_id, \"experiment-1\")\nprint(response.events[:5])  # show only the first 5 events\n</pre> response = client.models.get_episode_info(instance_id, \"experiment-1\") print(response.events[:5])  # show only the first 5 events <pre>[{'data': {'observation': [1.685598791258122, 2.6913285201132173]}, 'id': 1, 'metadata': {}, 'timestamp': '2025-04-09T12:05:49.785'}, {'data': {'observation': [1.856874937605562, 2.0098560536264465]}, 'id': 2, 'metadata': {}, 'timestamp': '2025-04-09T12:05:49.831'}, {'data': {'observation': [-1.151819784080379, 1.3309346163746762]}, 'id': 3, 'metadata': {}, 'timestamp': '2025-04-09T12:05:49.831'}, {'data': {'observation': [-2.8065098511059823, -1.0791064108480724]}, 'id': 4, 'metadata': {}, 'timestamp': '2025-04-09T12:05:49.831'}, {'data': {'observation': [-2.722337900836736, -1.9894421015660269]}, 'id': 5, 'metadata': {}, 'timestamp': '2025-04-09T12:05:49.831'}]\n</pre> <p>Loading External Data</p> <p> <ul> <li>Events can be loaded into any episode, not just the default one</li> <li>Use `wipe_episode` to clear an episode's data and start fresh</li> <li>Events persist across episode switches</li> <li>Deleting a model instance removes all associated episodes and their data</li> </ul> </p> In\u00a0[11]: Copied! <pre>response = client.models.run_learning(instance_id, {\n    \"episodes\": [\"experiment-1\"]  # learn from the \"experiment-1\" episode explicitly\n})\nprint(response)\n</pre> response = client.models.run_learning(instance_id, {     \"episodes\": [\"experiment-1\"]  # learn from the \"experiment-1\" episode explicitly }) print(response) <pre>learned_parameters={'A': {'type': 'mdarray', 'encoding': 'array_of_arrays', 'shape': [2, 2], 'data': [[0.9237977605471468, -0.3836701094180282], [0.3841996762544922, 0.9279011733605698]]}}\n</pre> <p>The learning process returns a response containing the model's learned parameters. The model's state has been updated automatically with the new parameters. We can verify this by fetching the current model parameters:</p> In\u00a0[12]: Copied! <pre>response = client.models.get_model_instance_parameters(instance_id)\nprint(response)\n</pre> response = client.models.get_model_instance_parameters(instance_id) print(response) <pre>parameters={'A': {'type': 'mdarray', 'encoding': 'array_of_arrays', 'shape': [2, 2], 'data': [[0.9237977605471468, -0.3836701094180282], [0.3841996762544922, 0.9279011733605698]]}}\n</pre> <p>After the learning process is complete, we can use the model to make predictions on new data by calling the inference endpoint.</p> In\u00a0[13]: Copied! <pre># Set preferences for the inference response format\nclient._api_client.default_headers[\"Prefer\"] = \"distributions_repr=data,distributions_data=mean_cov,mdarray_data=diagonal,mdarray_repr=data\"\n\n# Run inference\nresponse = client.models.run_inference(instance_id, {\n    \"data\": {\n        \"observation\": dataset[\"y_train\"][-1].tolist(),\n        \"current_state\": dataset[\"x_train\"][-1].tolist()\n    }\n})\n\n# Extract and plot the results\nstates = response.results[\"states\"]\nstates_mean = [state[\"mean\"] for state in states]\nstates_cov = [state[\"cov\"] for state in states]\n\n# Plot the results\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12))\n\n# First dimension\nax1.plot(dataset[\"x_test\"][:, 0], label=\"true states\", linewidth=2)\nax1.scatter(range(len(dataset[\"y_test\"])), dataset[\"y_test\"][:, 0], label=\"observations\", s=20, alpha=0.7)\nax1.plot([s[0] for s in states_mean], label=\"predicted states\", linewidth=2)\nax1.fill_between(range(len(states_mean)), \n                [s[0] - c[0] for s, c in zip(states_mean, states_cov)],\n                [s[0] + c[0] for s, c in zip(states_mean, states_cov)],\n                alpha=0.2)\nax1.legend(loc='lower left')\n\n# Second dimension\nax2.plot(dataset[\"x_test\"][:, 1], label=\"true states\", linewidth=2)\nax2.scatter(range(len(dataset[\"y_test\"])), dataset[\"y_test\"][:, 1], label=\"observations\", s=20, alpha=0.7)\nax2.plot([s[1] for s in states_mean], label=\"predicted states\", linewidth=2)\nax2.fill_between(range(len(states_mean)),\n                [s[1] - c[1] for s, c in zip(states_mean, states_cov)],\n                [s[1] + c[1] for s, c in zip(states_mean, states_cov)],\n                alpha=0.2)\nax2.legend(loc='lower left')\n\nplt.show()\n</pre> # Set preferences for the inference response format client._api_client.default_headers[\"Prefer\"] = \"distributions_repr=data,distributions_data=mean_cov,mdarray_data=diagonal,mdarray_repr=data\"  # Run inference response = client.models.run_inference(instance_id, {     \"data\": {         \"observation\": dataset[\"y_train\"][-1].tolist(),         \"current_state\": dataset[\"x_train\"][-1].tolist()     } })  # Extract and plot the results states = response.results[\"states\"] states_mean = [state[\"mean\"] for state in states] states_cov = [state[\"cov\"] for state in states]  # Plot the results fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12))  # First dimension ax1.plot(dataset[\"x_test\"][:, 0], label=\"true states\", linewidth=2) ax1.scatter(range(len(dataset[\"y_test\"])), dataset[\"y_test\"][:, 0], label=\"observations\", s=20, alpha=0.7) ax1.plot([s[0] for s in states_mean], label=\"predicted states\", linewidth=2) ax1.fill_between(range(len(states_mean)),                  [s[0] - c[0] for s, c in zip(states_mean, states_cov)],                 [s[0] + c[0] for s, c in zip(states_mean, states_cov)],                 alpha=0.2) ax1.legend(loc='lower left')  # Second dimension ax2.plot(dataset[\"x_test\"][:, 1], label=\"true states\", linewidth=2) ax2.scatter(range(len(dataset[\"y_test\"])), dataset[\"y_test\"][:, 1], label=\"observations\", s=20, alpha=0.7) ax2.plot([s[1] for s in states_mean], label=\"predicted states\", linewidth=2) ax2.fill_between(range(len(states_mean)),                 [s[1] - c[1] for s, c in zip(states_mean, states_cov)],                 [s[1] + c[1] for s, c in zip(states_mean, states_cov)],                 alpha=0.2) ax2.legend(loc='lower left')  plt.show() In\u00a0[14]: Copied! <pre>response = client.models.delete_episode(instance_id, \"experiment-1\")\nprint(response)\n</pre> response = client.models.delete_episode(instance_id, \"experiment-1\") print(response) <pre>message='Episode deleted successfully'\n</pre> <p>Deleting the current episode automatically switches to the <code>default</code> episode.</p> In\u00a0[15]: Copied! <pre>response = client.models.get_model_instance(instance_id)\nprint(response.current_episode)\n</pre> response = client.models.get_model_instance(instance_id) print(response.current_episode) <pre>default\n</pre> <p>Deleting Episode After Learning</p> <p>         If you delete an episode after learning, the model state will not be affected. The model will continue to use the learned parameters.     </p> <p>Deleting the Default Episode</p> <p>         The `default` episode cannot be deleted. While you can clear the `default` episode's data, the episode itself must remain     </p> In\u00a0[16]: Copied! <pre>try:\n    response = client.models.delete_episode(instance_id, \"default\")\nexcept Exception as e:\n    print(e)\n</pre> try:     response = client.models.delete_episode(instance_id, \"default\") except Exception as e:     print(e) <pre>(400)\nReason: Bad Request\nHTTP response headers: HTTPHeaderDict({'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS', 'Access-Control-Allow-Headers': 'Content-Type, Authorization', 'Transfer-Encoding': 'chunked'})\nHTTP response body: error='Bad Request' message='Default episode cannot be deleted, wipe data instead'\n\n</pre> In\u00a0[17]: Copied! <pre># Clearing the default episode's data\nresponse = client.models.get_episode_info(instance_id, \"default\")\nprint(response)\n\nresponse = client.models.wipe_episode(instance_id, \"default\")\nprint(response)\n</pre> # Clearing the default episode's data response = client.models.get_episode_info(instance_id, \"default\") print(response)  response = client.models.wipe_episode(instance_id, \"default\") print(response) <pre>instance_id='2be7cc46-9d2f-48cc-8c15-7707a63358d6' episode_name='default' created_at=datetime.datetime(2025, 4, 9, 12, 5, 45, 990000, tzinfo=TzInfo(UTC)) events=[{'event_id': 1, 'data': {'current_state': [1.5582275491054993, 36.54079023195499], 'observation': [1.7502766655955309, 36.23167376775249]}, 'timestamp': '2025-04-09T12:06:17.647'}]\n</pre> <pre>message='Episode wiped successfully'\n</pre> In\u00a0[18]: Copied! <pre>response = client.models.get_episode_info(instance_id, \"default\")\nprint(response)\n</pre> response = client.models.get_episode_info(instance_id, \"default\") print(response)  <pre>instance_id='2be7cc46-9d2f-48cc-8c15-7707a63358d6' episode_name='default' created_at=datetime.datetime(2025, 4, 9, 12, 5, 45, 990000, tzinfo=TzInfo(UTC)) events=[]\n</pre> In\u00a0[19]: Copied! <pre>response = client.models.delete_model_instance(instance_id)\nprint(response)\n</pre> response = client.models.delete_model_instance(instance_id) print(response) <pre>message='Model instance deleted successfully'\n</pre>"},{"location":"examples/state-space-model/#inference-in-state-space-models","title":"Inference in State Space Models\u00b6","text":"<p>This guide covers the inference in State Space Models, which provides endpoints for inference with RxInfer models. You'll learn how to create, manage, and interact with episodes as well as perform a simple inference task.</p>"},{"location":"examples/state-space-model/#prerequisites","title":"Prerequisites\u00b6","text":"<p>Before using the Models API, you need to initialize the RxInfer client. The client will automatically handle authentication for you.</p>"},{"location":"examples/state-space-model/#historical-dataset","title":"Historical Dataset\u00b6","text":"<p>For this demonstration, we'll work with a synthetic dataset that represents a two-dimensional dynamical system. The data is generated by rotating a two-dimensional vector around the origin, creating a circular motion pattern. The dataset consists of:</p> <ul> <li>Hidden states: The true positions in 2D space</li> <li>Observations: Noisy measurements of these positions</li> <li>Training and test sets: The data is split to evaluate the model's predictive performance</li> </ul>"},{"location":"examples/state-space-model/#creating-a-model-instance","title":"Creating a Model Instance\u00b6","text":"<p>To analyze this dataset, we'll use the <code>LinearStateSpaceModel-v1</code>, which is designed to learn and predict the dynamics of linear state-space systems. This model is particularly suitable for our rotating signal as it can capture the underlying circular motion pattern.</p>"},{"location":"examples/state-space-model/#working-with-episodes","title":"Working with Episodes\u00b6","text":"<p>Episodes serve as containers for organizing training data and metadata in your model. They provide a structured way to:</p> <ul> <li>Manage different episodes of interacting with the environment</li> <li>Store sequential observations and arbitrary metadata attached to each event</li> <li>Track experiments and perform learning</li> <li>Organize model validation</li> </ul>"},{"location":"examples/state-space-model/#listing-episodes","title":"Listing Episodes\u00b6","text":"<p>To view all episodes associated with a model instance, use the <code>get_episodes</code> endpoint. This provides an overview of all available training sessions and their current status.</p> <p>Note</p> <p>         Each model automatically creates a `default` episode when it is created.     </p>"},{"location":"examples/state-space-model/#episode-details","title":"Episode Details\u00b6","text":"<p>For detailed information about a specific episode, including its events and metadata, use the <code>get_episode_info</code> endpoint. This is particularly useful when analyzing training history or debugging model behavior.</p>"},{"location":"examples/state-space-model/#creating-new-episodes","title":"Creating New Episodes\u00b6","text":"<p>When you want to start a new training session or experiment, create a new episode using the <code>create_episode</code> endpoint.</p>"},{"location":"examples/state-space-model/#loading-external-data-into-an-episode","title":"Loading External Data into an Episode\u00b6","text":"<p>The <code>attach_events_to_episode</code> endpoint allows you to load historical data into episodes for training or analysis. This is essential when you have pre-collected data that you want to use for model training or evaluation.</p> <p>Each event in your dataset should include:</p> <ul> <li><code>data</code>: The actual observation or measurement data (required)</li> <li><code>timestamp</code>: The time when the event occurred (optional, defaults to current time)</li> <li><code>metadata</code>: Additional contextual information about the event (optional)</li> </ul>"},{"location":"examples/state-space-model/#learn-the-parameters-of-the-model","title":"Learn the Parameters of the Model\u00b6","text":"<p>To learn the parameters of the model on the loaded data, create a learning request that specifies which episodes to use for training:</p>"},{"location":"examples/state-space-model/#deleting-episodes","title":"Deleting Episodes\u00b6","text":"<p>When an episode is no longer needed, you can remove it using the delete endpoint.</p>"},{"location":"examples/state-space-model/#wiping-data-from-an-episode","title":"Wiping Data from an Episode\u00b6","text":"<p>To clear the data from an episode, use the <code>wipe_episode</code> endpoint. This will remove all events from the episode, effectively resetting it to an empty state.</p>"},{"location":"examples/state-space-model/#deleting-model-instance","title":"Deleting Model Instance\u00b6","text":"<p>To delete a model instance, use the <code>delete_model_instance</code> endpoint. This will remove the model instance and all associated episodes and data.</p>"},{"location":"openapi/","title":"rxinferclient","text":"<p>API for RxInferServer.jl - A Julia server for RxInfer probabilistic programming framework Warning The specification is not yet stable and may undergo significant changes. </p> <p>The <code>rxinferclient</code> package is automatically generated by the OpenAPI Generator project:</p> <ul> <li>API version: 0.0.1</li> <li>Package version: 1.0.0</li> <li>Generator version: 7.13.0-SNAPSHOT</li> <li>Build package: org.openapitools.codegen.languages.PythonClientCodegen For more information, please visit https://github.com/lazydynamics/RxInferServer</li> </ul>"},{"location":"openapi/#requirements","title":"Requirements.","text":"<p>Python 3.8+</p>"},{"location":"openapi/#installation-usage","title":"Installation &amp; Usage","text":"<p>This python library package is generated without supporting files like setup.py or requirements files</p> <p>To be able to use it, you will need these dependencies in your own package that uses this library:</p> <ul> <li>urllib3 &gt;= 1.25.3, &lt; 3.0.0</li> <li>python-dateutil &gt;= 2.8.2</li> <li>pydantic &gt;= 2</li> <li>typing-extensions &gt;= 4.7.1</li> </ul>"},{"location":"openapi/#getting-started","title":"Getting Started","text":"<p>In your own code, to use this library to connect and interact with rxinferclient, you can run the following:</p> <pre><code>import rxinferclient\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.AuthenticationApi(api_client)\n\n    try:\n        # Generate authentication token\n        api_response = api_instance.token_generate()\n        print(\"The response of AuthenticationApi-&gt;token_generate:\\n\")\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling AuthenticationApi-&gt;token_generate: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/#documentation-for-api-endpoints","title":"Documentation for API Endpoints","text":"<p>All URIs are relative to http://localhost:8000/v1</p> Class Method HTTP request Description AuthenticationApi token_generate POST /token/generate Generate authentication token AuthenticationApi token_roles GET /token/roles Get token roles ModelsApi attach_events_to_episode POST /models/i/{instance_id}/episodes/{episode_name}/attach-events Attach events to an episode ModelsApi attach_metadata_to_event POST /models/i/{instance_id}/episodes/{episode_name}/events/{event_id}/attach-metadata Attach metadata to an event ModelsApi create_episode POST /models/i/{instance_id}/create-episode Create a new episode for a model instance ModelsApi create_model_instance POST /models/create-instance Create a new model instance ModelsApi delete_episode DELETE /models/i/{instance_id}/episodes/{episode_name} Delete an episode for a model ModelsApi delete_model_instance DELETE /models/i/{instance_id} Delete a model instance ModelsApi get_available_model GET /models/available/{model_name} Get information about a specific model available for creation ModelsApi get_available_models GET /models/available Get models available for creation ModelsApi get_episode_info GET /models/i/{instance_id}/episodes/{episode_name} Get episode information ModelsApi get_episodes GET /models/i/{instance_id}/episodes Get all episodes for a model instance ModelsApi get_model_instance GET /models/i/{instance_id} Get model instance information ModelsApi get_model_instance_parameters GET /models/i/{instance_id}/parameters Get the parameters of a model instance ModelsApi get_model_instance_state GET /models/i/{instance_id}/state Get the state of a model instance ModelsApi get_model_instances GET /models/instances Get all created model instances ModelsApi run_inference POST /models/i/{instance_id}/infer Run inference ModelsApi run_learning POST /models/i/{instance_id}/learn Learn from previous observations ModelsApi wipe_episode POST /models/i/{instance_id}/episodes/{episode_name}/wipe Wipe all events from an episode ServerApi get_server_info GET /info Get server information ServerApi ping_server GET /ping Health check endpoint"},{"location":"openapi/#documentation-for-models","title":"Documentation For Models","text":"<ul> <li>AttachEventsToEpisodeRequest</li> <li>AttachEventsToEpisodeRequestEventsInner</li> <li>AttachMetadataToEventRequest</li> <li>AvailableModel</li> <li>AvailableModelDetails</li> <li>CreateEpisodeRequest</li> <li>CreateModelInstanceRequest</li> <li>CreateModelInstanceResponse</li> <li>DeleteModelInstanceRequest</li> <li>EpisodeInfo</li> <li>ErrorResponse</li> <li>InferRequest</li> <li>InferResponse</li> <li>LearnRequest</li> <li>LearnResponse</li> <li>ModelInstance</li> <li>ModelInstanceParameters</li> <li>ModelInstanceState</li> <li>NotFoundResponse</li> <li>PingResponse</li> <li>ServerInfo</li> <li>SuccessResponse</li> <li>TokenGenerateResponse</li> <li>TokenRolesResponse</li> <li>UnauthorizedResponse</li> </ul>"},{"location":"openapi/#documentation-for-authorization","title":"Documentation For Authorization","text":"<p>Authentication schemes defined for the API: </p>"},{"location":"openapi/#apikeyauth","title":"ApiKeyAuth","text":"<ul> <li>Type: Bearer authentication</li> </ul>"},{"location":"openapi/#author","title":"Author","text":""},{"location":"openapi/swagger-ui/","title":"Swagger UI","text":""},{"location":"openapi/docs/AttachEventsToEpisodeRequest/","title":"AttachEventsToEpisodeRequest","text":""},{"location":"openapi/docs/AttachEventsToEpisodeRequest/#properties","title":"Properties","text":"Name Type Description Notes events List[AttachEventsToEpisodeRequestEventsInner] List of events to attach to the episode"},{"location":"openapi/docs/AttachEventsToEpisodeRequest/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.attach_events_to_episode_request import AttachEventsToEpisodeRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AttachEventsToEpisodeRequest from a JSON string\nattach_events_to_episode_request_instance = AttachEventsToEpisodeRequest.from_json(json)\n# print the JSON string representation of the object\nprint(AttachEventsToEpisodeRequest.to_json())\n\n# convert the object into a dict\nattach_events_to_episode_request_dict = attach_events_to_episode_request_instance.to_dict()\n# create an instance of AttachEventsToEpisodeRequest from a dict\nattach_events_to_episode_request_from_dict = AttachEventsToEpisodeRequest.from_dict(attach_events_to_episode_request_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/AttachEventsToEpisodeRequestEventsInner/","title":"AttachEventsToEpisodeRequestEventsInner","text":""},{"location":"openapi/docs/AttachEventsToEpisodeRequestEventsInner/#properties","title":"Properties","text":"Name Type Description Notes timestamp datetime Timestamp of the event [optional] data Dict[str, object] Arbitrary data to attach to the event, model-specific [optional] metadata Dict[str, object] Arbitrary metadata to attach to the event, model-specific [optional]"},{"location":"openapi/docs/AttachEventsToEpisodeRequestEventsInner/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.attach_events_to_episode_request_events_inner import AttachEventsToEpisodeRequestEventsInner\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AttachEventsToEpisodeRequestEventsInner from a JSON string\nattach_events_to_episode_request_events_inner_instance = AttachEventsToEpisodeRequestEventsInner.from_json(json)\n# print the JSON string representation of the object\nprint(AttachEventsToEpisodeRequestEventsInner.to_json())\n\n# convert the object into a dict\nattach_events_to_episode_request_events_inner_dict = attach_events_to_episode_request_events_inner_instance.to_dict()\n# create an instance of AttachEventsToEpisodeRequestEventsInner from a dict\nattach_events_to_episode_request_events_inner_from_dict = AttachEventsToEpisodeRequestEventsInner.from_dict(attach_events_to_episode_request_events_inner_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/AttachMetadataToEventRequest/","title":"AttachMetadataToEventRequest","text":""},{"location":"openapi/docs/AttachMetadataToEventRequest/#properties","title":"Properties","text":"Name Type Description Notes metadata Dict[str, object] Metadata to attach to the event"},{"location":"openapi/docs/AttachMetadataToEventRequest/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.attach_metadata_to_event_request import AttachMetadataToEventRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AttachMetadataToEventRequest from a JSON string\nattach_metadata_to_event_request_instance = AttachMetadataToEventRequest.from_json(json)\n# print the JSON string representation of the object\nprint(AttachMetadataToEventRequest.to_json())\n\n# convert the object into a dict\nattach_metadata_to_event_request_dict = attach_metadata_to_event_request_instance.to_dict()\n# create an instance of AttachMetadataToEventRequest from a dict\nattach_metadata_to_event_request_from_dict = AttachMetadataToEventRequest.from_dict(attach_metadata_to_event_request_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/AuthenticationApi/","title":"rxinferclient.AuthenticationApi","text":"<p>All URIs are relative to http://localhost:8000/v1</p> Method HTTP request Description token_generate POST /token/generate Generate authentication token token_roles GET /token/roles Get token roles"},{"location":"openapi/docs/AuthenticationApi/#token_generate","title":"token_generate","text":"<p>TokenGenerateResponse token_generate()</p> <p>Generate authentication token</p> <p>Generates a new authentication token for accessing protected endpoints</p>"},{"location":"openapi/docs/AuthenticationApi/#example","title":"Example","text":"<pre><code>import rxinferclient\nfrom rxinferclient.models.token_generate_response import TokenGenerateResponse\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.AuthenticationApi(api_client)\n\n    try:\n        # Generate authentication token\n        api_response = api_instance.token_generate()\n        print(\"The response of AuthenticationApi-&gt;token_generate:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling AuthenticationApi-&gt;token_generate: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/AuthenticationApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"openapi/docs/AuthenticationApi/#return-type","title":"Return type","text":"<p>TokenGenerateResponse</p>"},{"location":"openapi/docs/AuthenticationApi/#authorization","title":"Authorization","text":"<p>No authorization required</p>"},{"location":"openapi/docs/AuthenticationApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/AuthenticationApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully generated authentication token - 400 Unable to generate token - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/AuthenticationApi/#token_roles","title":"token_roles","text":"<p>TokenRolesResponse token_roles()</p> <p>Get token roles</p> <p>Retrieve the list of roles for a specific token</p>"},{"location":"openapi/docs/AuthenticationApi/#example_1","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.token_roles_response import TokenRolesResponse\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.AuthenticationApi(api_client)\n\n    try:\n        # Get token roles\n        api_response = api_instance.token_roles()\n        print(\"The response of AuthenticationApi-&gt;token_roles:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling AuthenticationApi-&gt;token_roles: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/AuthenticationApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"openapi/docs/AuthenticationApi/#return-type_1","title":"Return type","text":"<p>TokenRolesResponse</p>"},{"location":"openapi/docs/AuthenticationApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/AuthenticationApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/AuthenticationApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully retrieved token roles - 401 Access token is missing or invalid - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/AvailableModel/","title":"AvailableModel","text":""},{"location":"openapi/docs/AvailableModel/#properties","title":"Properties","text":"Name Type Description Notes details AvailableModelDetails config Dict[str, object] The entire model configuration as in the `config.yaml` file.  May include arbitrary fields, which are not part of the public interface. Note that this information also includes the properties from the `details` object."},{"location":"openapi/docs/AvailableModel/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.available_model import AvailableModel\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AvailableModel from a JSON string\navailable_model_instance = AvailableModel.from_json(json)\n# print the JSON string representation of the object\nprint(AvailableModel.to_json())\n\n# convert the object into a dict\navailable_model_dict = available_model_instance.to_dict()\n# create an instance of AvailableModel from a dict\navailable_model_from_dict = AvailableModel.from_dict(available_model_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/AvailableModelDetails/","title":"AvailableModelDetails","text":"<p>Primary model details. Note that these are also included in the <code>config</code> object. </p>"},{"location":"openapi/docs/AvailableModelDetails/#properties","title":"Properties","text":"Name Type Description Notes name str Name of the model (usually with the version identifier, e.g. \\\"BetaBernoulli-v1\\\") [optional] description str Brief description of the model [optional] author str Author of the model [optional] roles List[str] List of roles that can access the model [optional]"},{"location":"openapi/docs/AvailableModelDetails/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.available_model_details import AvailableModelDetails\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AvailableModelDetails from a JSON string\navailable_model_details_instance = AvailableModelDetails.from_json(json)\n# print the JSON string representation of the object\nprint(AvailableModelDetails.to_json())\n\n# convert the object into a dict\navailable_model_details_dict = available_model_details_instance.to_dict()\n# create an instance of AvailableModelDetails from a dict\navailable_model_details_from_dict = AvailableModelDetails.from_dict(available_model_details_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/CreateEpisodeRequest/","title":"CreateEpisodeRequest","text":""},{"location":"openapi/docs/CreateEpisodeRequest/#properties","title":"Properties","text":"Name Type Description Notes name str Name of the episode to create"},{"location":"openapi/docs/CreateEpisodeRequest/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.create_episode_request import CreateEpisodeRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateEpisodeRequest from a JSON string\ncreate_episode_request_instance = CreateEpisodeRequest.from_json(json)\n# print the JSON string representation of the object\nprint(CreateEpisodeRequest.to_json())\n\n# convert the object into a dict\ncreate_episode_request_dict = create_episode_request_instance.to_dict()\n# create an instance of CreateEpisodeRequest from a dict\ncreate_episode_request_from_dict = CreateEpisodeRequest.from_dict(create_episode_request_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/CreateModelInstanceRequest/","title":"CreateModelInstanceRequest","text":""},{"location":"openapi/docs/CreateModelInstanceRequest/#properties","title":"Properties","text":"Name Type Description Notes model_name str The name of the model to create (including version identifier if applicable, e.g. \\\"BetaBernoulli-v1\\\") arguments Dict[str, object] Model-specific configuration arguments [optional] description str Optional description of the model instance [optional]"},{"location":"openapi/docs/CreateModelInstanceRequest/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.create_model_instance_request import CreateModelInstanceRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateModelInstanceRequest from a JSON string\ncreate_model_instance_request_instance = CreateModelInstanceRequest.from_json(json)\n# print the JSON string representation of the object\nprint(CreateModelInstanceRequest.to_json())\n\n# convert the object into a dict\ncreate_model_instance_request_dict = create_model_instance_request_instance.to_dict()\n# create an instance of CreateModelInstanceRequest from a dict\ncreate_model_instance_request_from_dict = CreateModelInstanceRequest.from_dict(create_model_instance_request_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/CreateModelInstanceResponse/","title":"CreateModelInstanceResponse","text":""},{"location":"openapi/docs/CreateModelInstanceResponse/#properties","title":"Properties","text":"Name Type Description Notes instance_id str Unique identifier for the created model instance"},{"location":"openapi/docs/CreateModelInstanceResponse/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.create_model_instance_response import CreateModelInstanceResponse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateModelInstanceResponse from a JSON string\ncreate_model_instance_response_instance = CreateModelInstanceResponse.from_json(json)\n# print the JSON string representation of the object\nprint(CreateModelInstanceResponse.to_json())\n\n# convert the object into a dict\ncreate_model_instance_response_dict = create_model_instance_response_instance.to_dict()\n# create an instance of CreateModelInstanceResponse from a dict\ncreate_model_instance_response_from_dict = CreateModelInstanceResponse.from_dict(create_model_instance_response_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/DeleteModelInstanceRequest/","title":"DeleteModelInstanceRequest","text":""},{"location":"openapi/docs/DeleteModelInstanceRequest/#properties","title":"Properties","text":"Name Type Description Notes instance_id str ID of the model instance to delete"},{"location":"openapi/docs/DeleteModelInstanceRequest/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.delete_model_instance_request import DeleteModelInstanceRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DeleteModelInstanceRequest from a JSON string\ndelete_model_instance_request_instance = DeleteModelInstanceRequest.from_json(json)\n# print the JSON string representation of the object\nprint(DeleteModelInstanceRequest.to_json())\n\n# convert the object into a dict\ndelete_model_instance_request_dict = delete_model_instance_request_instance.to_dict()\n# create an instance of DeleteModelInstanceRequest from a dict\ndelete_model_instance_request_from_dict = DeleteModelInstanceRequest.from_dict(delete_model_instance_request_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/EpisodeInfo/","title":"EpisodeInfo","text":""},{"location":"openapi/docs/EpisodeInfo/#properties","title":"Properties","text":"Name Type Description Notes instance_id str ID of the model instance this episode belongs to episode_name str Name of the episode created_at datetime Timestamp of when the episode was created events List[Dict[str, object]] List of events that have occurred in the episode"},{"location":"openapi/docs/EpisodeInfo/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.episode_info import EpisodeInfo\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of EpisodeInfo from a JSON string\nepisode_info_instance = EpisodeInfo.from_json(json)\n# print the JSON string representation of the object\nprint(EpisodeInfo.to_json())\n\n# convert the object into a dict\nepisode_info_dict = episode_info_instance.to_dict()\n# create an instance of EpisodeInfo from a dict\nepisode_info_from_dict = EpisodeInfo.from_dict(episode_info_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/ErrorResponse/","title":"ErrorResponse","text":""},{"location":"openapi/docs/ErrorResponse/#properties","title":"Properties","text":"Name Type Description Notes error str Error message explaining the failure message str Additional message providing details about the failure [optional]"},{"location":"openapi/docs/ErrorResponse/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.error_response import ErrorResponse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ErrorResponse from a JSON string\nerror_response_instance = ErrorResponse.from_json(json)\n# print the JSON string representation of the object\nprint(ErrorResponse.to_json())\n\n# convert the object into a dict\nerror_response_dict = error_response_instance.to_dict()\n# create an instance of ErrorResponse from a dict\nerror_response_from_dict = ErrorResponse.from_dict(error_response_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/InferRequest/","title":"InferRequest","text":""},{"location":"openapi/docs/InferRequest/#properties","title":"Properties","text":"Name Type Description Notes data Dict[str, object] Model-specific data to run inference on timestamp datetime Timestamp of the inference request, used to mark the event in the episode [optional] episode_name str Name of the episode to run inference on [optional] default to 'default'"},{"location":"openapi/docs/InferRequest/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.infer_request import InferRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InferRequest from a JSON string\ninfer_request_instance = InferRequest.from_json(json)\n# print the JSON string representation of the object\nprint(InferRequest.to_json())\n\n# convert the object into a dict\ninfer_request_dict = infer_request_instance.to_dict()\n# create an instance of InferRequest from a dict\ninfer_request_from_dict = InferRequest.from_dict(infer_request_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/InferResponse/","title":"InferResponse","text":""},{"location":"openapi/docs/InferResponse/#properties","title":"Properties","text":"Name Type Description Notes event_id int Unique identifier for the inference event results Dict[str, object] Model-specific results of the inference errors List[ErrorResponse] List of errors that occurred during the inference call, but were not fatal and the inference was still completed successfully"},{"location":"openapi/docs/InferResponse/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.infer_response import InferResponse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InferResponse from a JSON string\ninfer_response_instance = InferResponse.from_json(json)\n# print the JSON string representation of the object\nprint(InferResponse.to_json())\n\n# convert the object into a dict\ninfer_response_dict = infer_response_instance.to_dict()\n# create an instance of InferResponse from a dict\ninfer_response_from_dict = InferResponse.from_dict(infer_response_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/LearnRequest/","title":"LearnRequest","text":""},{"location":"openapi/docs/LearnRequest/#properties","title":"Properties","text":"Name Type Description Notes episodes List[str] List of episodes to learn from [default to [\"default\"]]"},{"location":"openapi/docs/LearnRequest/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.learn_request import LearnRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of LearnRequest from a JSON string\nlearn_request_instance = LearnRequest.from_json(json)\n# print the JSON string representation of the object\nprint(LearnRequest.to_json())\n\n# convert the object into a dict\nlearn_request_dict = learn_request_instance.to_dict()\n# create an instance of LearnRequest from a dict\nlearn_request_from_dict = LearnRequest.from_dict(learn_request_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/LearnResponse/","title":"LearnResponse","text":""},{"location":"openapi/docs/LearnResponse/#properties","title":"Properties","text":"Name Type Description Notes learned_parameters Dict[str, object] A dictionary of learned parameters and their values"},{"location":"openapi/docs/LearnResponse/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.learn_response import LearnResponse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of LearnResponse from a JSON string\nlearn_response_instance = LearnResponse.from_json(json)\n# print the JSON string representation of the object\nprint(LearnResponse.to_json())\n\n# convert the object into a dict\nlearn_response_dict = learn_response_instance.to_dict()\n# create an instance of LearnResponse from a dict\nlearn_response_from_dict = LearnResponse.from_dict(learn_response_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/ModelInstance/","title":"ModelInstance","text":""},{"location":"openapi/docs/ModelInstance/#properties","title":"Properties","text":"Name Type Description Notes instance_id str Unique identifier for the created model instance model_name str Name of the model (including version identifier if applicable, e.g. \\\"BetaBernoulli-v1\\\") created_at datetime Timestamp of when the model was created description str Description of the created model instance arguments Dict[str, object] Model-specific configuration arguments current_episode str Name of the current episode for this model"},{"location":"openapi/docs/ModelInstance/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.model_instance import ModelInstance\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ModelInstance from a JSON string\nmodel_instance_instance = ModelInstance.from_json(json)\n# print the JSON string representation of the object\nprint(ModelInstance.to_json())\n\n# convert the object into a dict\nmodel_instance_dict = model_instance_instance.to_dict()\n# create an instance of ModelInstance from a dict\nmodel_instance_from_dict = ModelInstance.from_dict(model_instance_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/ModelInstanceParameters/","title":"ModelInstanceParameters","text":""},{"location":"openapi/docs/ModelInstanceParameters/#properties","title":"Properties","text":"Name Type Description Notes parameters Dict[str, object] An object containing the current parameters of the model instance. The keys are the parameter names as defined in the model configuration, and the values are the parameter values."},{"location":"openapi/docs/ModelInstanceParameters/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.model_instance_parameters import ModelInstanceParameters\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ModelInstanceParameters from a JSON string\nmodel_instance_parameters_instance = ModelInstanceParameters.from_json(json)\n# print the JSON string representation of the object\nprint(ModelInstanceParameters.to_json())\n\n# convert the object into a dict\nmodel_instance_parameters_dict = model_instance_parameters_instance.to_dict()\n# create an instance of ModelInstanceParameters from a dict\nmodel_instance_parameters_from_dict = ModelInstanceParameters.from_dict(model_instance_parameters_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/ModelInstanceState/","title":"ModelInstanceState","text":""},{"location":"openapi/docs/ModelInstanceState/#properties","title":"Properties","text":"Name Type Description Notes state Dict[str, object] An object containing the current state of the model instance.  May include arbitrary fields specific to the model. See the model documentation for more details."},{"location":"openapi/docs/ModelInstanceState/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.model_instance_state import ModelInstanceState\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ModelInstanceState from a JSON string\nmodel_instance_state_instance = ModelInstanceState.from_json(json)\n# print the JSON string representation of the object\nprint(ModelInstanceState.to_json())\n\n# convert the object into a dict\nmodel_instance_state_dict = model_instance_state_instance.to_dict()\n# create an instance of ModelInstanceState from a dict\nmodel_instance_state_from_dict = ModelInstanceState.from_dict(model_instance_state_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/","title":"rxinferclient.ModelsApi","text":"<p>All URIs are relative to http://localhost:8000/v1</p> Method HTTP request Description attach_events_to_episode POST /models/i/{instance_id}/episodes/{episode_name}/attach-events Attach events to an episode attach_metadata_to_event POST /models/i/{instance_id}/episodes/{episode_name}/events/{event_id}/attach-metadata Attach metadata to an event create_episode POST /models/i/{instance_id}/create-episode Create a new episode for a model instance create_model_instance POST /models/create-instance Create a new model instance delete_episode DELETE /models/i/{instance_id}/episodes/{episode_name} Delete an episode for a model delete_model_instance DELETE /models/i/{instance_id} Delete a model instance get_available_model GET /models/available/{model_name} Get information about a specific model available for creation get_available_models GET /models/available Get models available for creation get_episode_info GET /models/i/{instance_id}/episodes/{episode_name} Get episode information get_episodes GET /models/i/{instance_id}/episodes Get all episodes for a model instance get_model_instance GET /models/i/{instance_id} Get model instance information get_model_instance_parameters GET /models/i/{instance_id}/parameters Get the parameters of a model instance get_model_instance_state GET /models/i/{instance_id}/state Get the state of a model instance get_model_instances GET /models/instances Get all created model instances run_inference POST /models/i/{instance_id}/infer Run inference run_learning POST /models/i/{instance_id}/learn Learn from previous observations wipe_episode POST /models/i/{instance_id}/episodes/{episode_name}/wipe Wipe all events from an episode"},{"location":"openapi/docs/ModelsApi/#attach_events_to_episode","title":"attach_events_to_episode","text":"<p>SuccessResponse attach_events_to_episode(instance_id, episode_name, attach_events_to_episode_request)</p> <p>Attach events to an episode</p> <p>Attach events to a specific episode for a model</p>"},{"location":"openapi/docs/ModelsApi/#example","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.attach_events_to_episode_request import AttachEventsToEpisodeRequest\nfrom rxinferclient.models.success_response import SuccessResponse\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | ID of the model instance to attach events to\n    episode_name = 'episode_name_example' # str | Name of the episode to attach events to\n    attach_events_to_episode_request = rxinferclient.AttachEventsToEpisodeRequest() # AttachEventsToEpisodeRequest | \n\n    try:\n        # Attach events to an episode\n        api_response = api_instance.attach_events_to_episode(instance_id, episode_name, attach_events_to_episode_request)\n        print(\"The response of ModelsApi-&gt;attach_events_to_episode:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;attach_events_to_episode: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters","title":"Parameters","text":"Name Type Description Notes instance_id str ID of the model instance to attach events to episode_name str Name of the episode to attach events to attach_events_to_episode_request AttachEventsToEpisodeRequest"},{"location":"openapi/docs/ModelsApi/#return-type","title":"Return type","text":"<p>SuccessResponse</p>"},{"location":"openapi/docs/ModelsApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully attached events to the episode - 400 Bad request, e.g. invalid data - 401 Access token is missing, invalid or has no access to the specific model - 404 Model or episode not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#attach_metadata_to_event","title":"attach_metadata_to_event","text":"<p>SuccessResponse attach_metadata_to_event(instance_id, episode_name, event_id, attach_metadata_to_event_request)</p> <p>Attach metadata to an event</p> <p>Attach metadata to a specific event for a model</p>"},{"location":"openapi/docs/ModelsApi/#example_1","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.attach_metadata_to_event_request import AttachMetadataToEventRequest\nfrom rxinferclient.models.success_response import SuccessResponse\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | ID of the model instance to attach metadata to\n    episode_name = 'episode_name_example' # str | Name of the episode to attach metadata to\n    event_id = 56 # int | ID of the event to attach metadata to\n    attach_metadata_to_event_request = rxinferclient.AttachMetadataToEventRequest() # AttachMetadataToEventRequest | \n\n    try:\n        # Attach metadata to an event\n        api_response = api_instance.attach_metadata_to_event(instance_id, episode_name, event_id, attach_metadata_to_event_request)\n        print(\"The response of ModelsApi-&gt;attach_metadata_to_event:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;attach_metadata_to_event: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes instance_id str ID of the model instance to attach metadata to episode_name str Name of the episode to attach metadata to event_id int ID of the event to attach metadata to attach_metadata_to_event_request AttachMetadataToEventRequest"},{"location":"openapi/docs/ModelsApi/#return-type_1","title":"Return type","text":"<p>SuccessResponse</p>"},{"location":"openapi/docs/ModelsApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully attached metadata to the event - 401 Access token is missing, invalid or has no access to the specific model - 404 Model or episode not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#create_episode","title":"create_episode","text":"<p>EpisodeInfo create_episode(instance_id, create_episode_request)</p> <p>Create a new episode for a model instance</p> <p>Create a new episode for a specific model instance. Note that the default episode is created automatically when the model instance is created.  When a new episode is created, it becomes the current episode for the model instance.</p>"},{"location":"openapi/docs/ModelsApi/#example_2","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.create_episode_request import CreateEpisodeRequest\nfrom rxinferclient.models.episode_info import EpisodeInfo\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | ID of the model instance to create episode for\n    create_episode_request = rxinferclient.CreateEpisodeRequest() # CreateEpisodeRequest | \n\n    try:\n        # Create a new episode for a model instance\n        api_response = api_instance.create_episode(instance_id, create_episode_request)\n        print(\"The response of ModelsApi-&gt;create_episode:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;create_episode: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes instance_id str ID of the model instance to create episode for create_episode_request CreateEpisodeRequest"},{"location":"openapi/docs/ModelsApi/#return-type_2","title":"Return type","text":"<p>EpisodeInfo</p>"},{"location":"openapi/docs/ModelsApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully created episode - 400 Episode cannot be created, e.g. it already exists - 401 Access token is missing, invalid or has no access to the specific model - 404 Model instance not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#create_model_instance","title":"create_model_instance","text":"<p>CreateModelInstanceResponse create_model_instance(create_model_instance_request)</p> <p>Create a new model instance</p> <p>Creates a new instance of a model with the specified configuration</p>"},{"location":"openapi/docs/ModelsApi/#example_3","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.create_model_instance_request import CreateModelInstanceRequest\nfrom rxinferclient.models.create_model_instance_response import CreateModelInstanceResponse\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    create_model_instance_request = rxinferclient.CreateModelInstanceRequest() # CreateModelInstanceRequest | \n\n    try:\n        # Create a new model instance\n        api_response = api_instance.create_model_instance(create_model_instance_request)\n        print(\"The response of ModelsApi-&gt;create_model_instance:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;create_model_instance: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes create_model_instance_request CreateModelInstanceRequest"},{"location":"openapi/docs/ModelsApi/#return-type_3","title":"Return type","text":"<p>CreateModelInstanceResponse</p>"},{"location":"openapi/docs/ModelsApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Model instance created successfully - 401 Access token is missing or invalid - 400 Bad request - 404 Model not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#delete_episode","title":"delete_episode","text":"<p>SuccessResponse delete_episode(instance_id, episode_name)</p> <p>Delete an episode for a model</p> <p>Delete a specific episode for a model instance. Note that the default episode cannot be deleted, but you can wipe data from it. If the deleted episode was the current episode, the default episode will become the current episode.</p>"},{"location":"openapi/docs/ModelsApi/#example_4","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.success_response import SuccessResponse\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | ID of the model instance to delete episode for\n    episode_name = 'episode_name_example' # str | Name of the episode to delete\n\n    try:\n        # Delete an episode for a model\n        api_response = api_instance.delete_episode(instance_id, episode_name)\n        print(\"The response of ModelsApi-&gt;delete_episode:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;delete_episode: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes instance_id str ID of the model instance to delete episode for episode_name str Name of the episode to delete"},{"location":"openapi/docs/ModelsApi/#return-type_4","title":"Return type","text":"<p>SuccessResponse</p>"},{"location":"openapi/docs/ModelsApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully deleted episode - 400 Episode cannot be deleted, e.g. it is the default episode - 401 Access token is missing, invalid or has no access to the specific model - 404 Model or episode not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#delete_model_instance","title":"delete_model_instance","text":"<p>SuccessResponse delete_model_instance(instance_id)</p> <p>Delete a model instance</p> <p>Delete a specific model instance by its ID</p>"},{"location":"openapi/docs/ModelsApi/#example_5","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.success_response import SuccessResponse\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | ID of the model instance to delete\n\n    try:\n        # Delete a model instance\n        api_response = api_instance.delete_model_instance(instance_id)\n        print(\"The response of ModelsApi-&gt;delete_model_instance:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;delete_model_instance: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes instance_id str ID of the model instance to delete"},{"location":"openapi/docs/ModelsApi/#return-type_5","title":"Return type","text":"<p>SuccessResponse</p>"},{"location":"openapi/docs/ModelsApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 Model successfully deleted - 401 Access token is missing, invalid or has no access to the specific model - 404 Model not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#get_available_model","title":"get_available_model","text":"<p>AvailableModel get_available_model(model_name)</p> <p>Get information about a specific model available for creation</p> <p>Retrieve detailed information about a specific model available for creation</p>"},{"location":"openapi/docs/ModelsApi/#example_6","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.available_model import AvailableModel\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    model_name = 'model_name_example' # str | Name of the model to retrieve information for (including version identifier if applicable, e.g. \\\"BetaBernoulli-v1\\\")\n\n    try:\n        # Get information about a specific model available for creation\n        api_response = api_instance.get_available_model(model_name)\n        print(\"The response of ModelsApi-&gt;get_available_model:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;get_available_model: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes model_name str Name of the model to retrieve information for (including version identifier if applicable, e.g. \\\"BetaBernoulli-v1\\\")"},{"location":"openapi/docs/ModelsApi/#return-type_6","title":"Return type","text":"<p>AvailableModel</p>"},{"location":"openapi/docs/ModelsApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully retrieved model details - 401 Access token is missing or invalid - 404 Model cannot be found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#get_available_models","title":"get_available_models","text":"<p>List[AvailableModel] get_available_models()</p> <p>Get models available for creation</p> <p>Retrieve the list of models available for creation for a given token. This list specifies names and available arguments for each model.</p> <p>Note The list of available models might differ for different access tokens. For example, a token with only the \"user\" role might not have access to all models.</p>"},{"location":"openapi/docs/ModelsApi/#example_7","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.available_model import AvailableModel\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n\n    try:\n        # Get models available for creation\n        api_response = api_instance.get_available_models()\n        print(\"The response of ModelsApi-&gt;get_available_models:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;get_available_models: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_7","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"openapi/docs/ModelsApi/#return-type_7","title":"Return type","text":"<p>List[AvailableModel]</p>"},{"location":"openapi/docs/ModelsApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully retrieved list of models available for creation - 401 Access token is missing or invalid - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#get_episode_info","title":"get_episode_info","text":"<p>EpisodeInfo get_episode_info(instance_id, episode_name)</p> <p>Get episode information</p> <p>Retrieve information about a specific episode of a model</p>"},{"location":"openapi/docs/ModelsApi/#example_8","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.episode_info import EpisodeInfo\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | ID of the model instance to retrieve episode for\n    episode_name = 'episode_name_example' # str | Name of the episode to retrieve\n\n    try:\n        # Get episode information\n        api_response = api_instance.get_episode_info(instance_id, episode_name)\n        print(\"The response of ModelsApi-&gt;get_episode_info:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;get_episode_info: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes instance_id str ID of the model instance to retrieve episode for episode_name str Name of the episode to retrieve"},{"location":"openapi/docs/ModelsApi/#return-type_8","title":"Return type","text":"<p>EpisodeInfo</p>"},{"location":"openapi/docs/ModelsApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully retrieved episode information - 401 Access token is missing, invalid or has no access to the specific model - 404 Model or episode not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#get_episodes","title":"get_episodes","text":"<p>List[EpisodeInfo] get_episodes(instance_id)</p> <p>Get all episodes for a model instance</p> <p>Retrieve all episodes for a specific model instance</p>"},{"location":"openapi/docs/ModelsApi/#example_9","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.episode_info import EpisodeInfo\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | ID of the model instance to retrieve episodes for\n\n    try:\n        # Get all episodes for a model instance\n        api_response = api_instance.get_episodes(instance_id)\n        print(\"The response of ModelsApi-&gt;get_episodes:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;get_episodes: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes instance_id str ID of the model instance to retrieve episodes for"},{"location":"openapi/docs/ModelsApi/#return-type_9","title":"Return type","text":"<p>List[EpisodeInfo]</p>"},{"location":"openapi/docs/ModelsApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully retrieved list of episodes - 401 Access token is missing, invalid or has no access to the specific model - 404 Model not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#get_model_instance","title":"get_model_instance","text":"<p>ModelInstance get_model_instance(instance_id)</p> <p>Get model instance information</p> <p>Retrieve detailed information about a specific model instance</p>"},{"location":"openapi/docs/ModelsApi/#example_10","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.model_instance import ModelInstance\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | ID of the model instance to retrieve information for\n\n    try:\n        # Get model instance information\n        api_response = api_instance.get_model_instance(instance_id)\n        print(\"The response of ModelsApi-&gt;get_model_instance:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;get_model_instance: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes instance_id str ID of the model instance to retrieve information for"},{"location":"openapi/docs/ModelsApi/#return-type_10","title":"Return type","text":"<p>ModelInstance</p>"},{"location":"openapi/docs/ModelsApi/#authorization_10","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully retrieved model information - 401 Access token is missing, invalid or has no access to the specific model - 404 Model not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#get_model_instance_parameters","title":"get_model_instance_parameters","text":"<p>ModelInstanceParameters get_model_instance_parameters(instance_id)</p> <p>Get the parameters of a model instance</p> <p>Retrieve the parameters of a specific model instance</p>"},{"location":"openapi/docs/ModelsApi/#example_11","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.model_instance_parameters import ModelInstanceParameters\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | \n\n    try:\n        # Get the parameters of a model instance\n        api_response = api_instance.get_model_instance_parameters(instance_id)\n        print(\"The response of ModelsApi-&gt;get_model_instance_parameters:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;get_model_instance_parameters: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes instance_id str"},{"location":"openapi/docs/ModelsApi/#return-type_11","title":"Return type","text":"<p>ModelInstanceParameters</p>"},{"location":"openapi/docs/ModelsApi/#authorization_11","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully retrieved model parameters - 400 Model parameters cannot be retrieved due to internal error - 401 Access token is missing, invalid or has no access to the specific model - 404 Model not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#get_model_instance_state","title":"get_model_instance_state","text":"<p>ModelInstanceState get_model_instance_state(instance_id)</p> <p>Get the state of a model instance</p> <p>Retrieve the state of a specific model instance</p>"},{"location":"openapi/docs/ModelsApi/#example_12","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.model_instance_state import ModelInstanceState\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | ID of the model instance to retrieve state for\n\n    try:\n        # Get the state of a model instance\n        api_response = api_instance.get_model_instance_state(instance_id)\n        print(\"The response of ModelsApi-&gt;get_model_instance_state:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;get_model_instance_state: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes instance_id str ID of the model instance to retrieve state for"},{"location":"openapi/docs/ModelsApi/#return-type_12","title":"Return type","text":"<p>ModelInstanceState</p>"},{"location":"openapi/docs/ModelsApi/#authorization_12","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully retrieved model state. Each model has its own state, which is a dictionary of arbitrary key-value pairs. Check model-specific documentation for more details. - 400 Model state cannot be retrieved due to internal error - 401 Access token is missing, invalid or has no access to the specific model - 404 Model not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#get_model_instances","title":"get_model_instances","text":"<p>List[ModelInstance] get_model_instances()</p> <p>Get all created model instances</p> <p>Retrieve detailed information about all created model instances for a specific token</p>"},{"location":"openapi/docs/ModelsApi/#example_13","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.model_instance import ModelInstance\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n\n    try:\n        # Get all created model instances\n        api_response = api_instance.get_model_instances()\n        print(\"The response of ModelsApi-&gt;get_model_instances:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;get_model_instances: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_13","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"openapi/docs/ModelsApi/#return-type_13","title":"Return type","text":"<p>List[ModelInstance]</p>"},{"location":"openapi/docs/ModelsApi/#authorization_13","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully retrieved list of created model instances - 401 Access token is missing or invalid - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#run_inference","title":"run_inference","text":"<p>InferResponse run_inference(instance_id, infer_request)</p> <p>Run inference</p> <p>Run inference on a specific model instance</p>"},{"location":"openapi/docs/ModelsApi/#example_14","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.infer_request import InferRequest\nfrom rxinferclient.models.infer_response import InferResponse\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | ID of the model instance to run inference on\n    infer_request = rxinferclient.InferRequest() # InferRequest | \n\n    try:\n        # Run inference\n        api_response = api_instance.run_inference(instance_id, infer_request)\n        print(\"The response of ModelsApi-&gt;run_inference:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;run_inference: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes instance_id str ID of the model instance to run inference on infer_request InferRequest"},{"location":"openapi/docs/ModelsApi/#return-type_14","title":"Return type","text":"<p>InferResponse</p>"},{"location":"openapi/docs/ModelsApi/#authorization_14","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully ran inference on the model - 401 Access token is missing, invalid or has no access to the specific model - 404 Model not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#run_learning","title":"run_learning","text":"<p>LearnResponse run_learning(instance_id, learn_request)</p> <p>Learn from previous observations</p> <p>Learn from previous episodes for a specific model</p>"},{"location":"openapi/docs/ModelsApi/#example_15","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.learn_request import LearnRequest\nfrom rxinferclient.models.learn_response import LearnResponse\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | \n    learn_request = rxinferclient.LearnRequest() # LearnRequest | \n\n    try:\n        # Learn from previous observations\n        api_response = api_instance.run_learning(instance_id, learn_request)\n        print(\"The response of ModelsApi-&gt;run_learning:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;run_learning: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes instance_id str learn_request LearnRequest"},{"location":"openapi/docs/ModelsApi/#return-type_15","title":"Return type","text":"<p>LearnResponse</p>"},{"location":"openapi/docs/ModelsApi/#authorization_15","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully ran learning on the model - 401 Access token is missing, invalid or has no access to the specific model - 404 Model not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ModelsApi/#wipe_episode","title":"wipe_episode","text":"<p>SuccessResponse wipe_episode(instance_id, episode_name)</p> <p>Wipe all events from an episode</p> <p>Wipe all events from a specific episode for a model</p>"},{"location":"openapi/docs/ModelsApi/#example_16","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.success_response import SuccessResponse\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ModelsApi(api_client)\n    instance_id = 'instance_id_example' # str | ID of the model instance to wipe episode for\n    episode_name = 'episode_name_example' # str | Name of the episode to wipe\n\n    try:\n        # Wipe all events from an episode\n        api_response = api_instance.wipe_episode(instance_id, episode_name)\n        print(\"The response of ModelsApi-&gt;wipe_episode:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ModelsApi-&gt;wipe_episode: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ModelsApi/#parameters_16","title":"Parameters","text":"Name Type Description Notes instance_id str ID of the model instance to wipe episode for episode_name str Name of the episode to wipe"},{"location":"openapi/docs/ModelsApi/#return-type_16","title":"Return type","text":"<p>SuccessResponse</p>"},{"location":"openapi/docs/ModelsApi/#authorization_16","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ModelsApi/#http-request-headers_16","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ModelsApi/#http-response-details_16","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully wiped episode - 401 Access token is missing, invalid or has no access to the specific model - 404 Model or episode not found - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/NotFoundResponse/","title":"NotFoundResponse","text":""},{"location":"openapi/docs/NotFoundResponse/#properties","title":"Properties","text":"Name Type Description Notes error str Error type, always \\\"Not Found\\\" for this error message str Detailed message explaining why the resource was not found"},{"location":"openapi/docs/NotFoundResponse/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.not_found_response import NotFoundResponse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of NotFoundResponse from a JSON string\nnot_found_response_instance = NotFoundResponse.from_json(json)\n# print the JSON string representation of the object\nprint(NotFoundResponse.to_json())\n\n# convert the object into a dict\nnot_found_response_dict = not_found_response_instance.to_dict()\n# create an instance of NotFoundResponse from a dict\nnot_found_response_from_dict = NotFoundResponse.from_dict(not_found_response_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/PingResponse/","title":"PingResponse","text":""},{"location":"openapi/docs/PingResponse/#properties","title":"Properties","text":"Name Type Description Notes status str Status of the server default to 'ok'"},{"location":"openapi/docs/PingResponse/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.ping_response import PingResponse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PingResponse from a JSON string\nping_response_instance = PingResponse.from_json(json)\n# print the JSON string representation of the object\nprint(PingResponse.to_json())\n\n# convert the object into a dict\nping_response_dict = ping_response_instance.to_dict()\n# create an instance of PingResponse from a dict\nping_response_from_dict = PingResponse.from_dict(ping_response_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/ServerApi/","title":"rxinferclient.ServerApi","text":"<p>All URIs are relative to http://localhost:8000/v1</p> Method HTTP request Description get_server_info GET /info Get server information ping_server GET /ping Health check endpoint"},{"location":"openapi/docs/ServerApi/#get_server_info","title":"get_server_info","text":"<p>ServerInfo get_server_info()</p> <p>Get server information</p> <p>Returns information about the server, such as the RxInferServer version, RxInfer version, Julia version, server edition and API version</p>"},{"location":"openapi/docs/ServerApi/#example","title":"Example","text":"<ul> <li>Bearer Authentication (ApiKeyAuth):</li> </ul> <pre><code>import rxinferclient\nfrom rxinferclient.models.server_info import ServerInfo\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization: ApiKeyAuth\nconfiguration = rxinferclient.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ServerApi(api_client)\n\n    try:\n        # Get server information\n        api_response = api_instance.get_server_info()\n        print(\"The response of ServerApi-&gt;get_server_info:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ServerApi-&gt;get_server_info: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ServerApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"openapi/docs/ServerApi/#return-type","title":"Return type","text":"<p>ServerInfo</p>"},{"location":"openapi/docs/ServerApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth</p>"},{"location":"openapi/docs/ServerApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ServerApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully retrieved server information - 401 Access token is missing or invalid - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ServerApi/#ping_server","title":"ping_server","text":"<p>PingResponse ping_server()</p> <p>Health check endpoint</p> <p>Simple endpoint to check if the server is alive and running</p>"},{"location":"openapi/docs/ServerApi/#example_1","title":"Example","text":"<pre><code>import rxinferclient\nfrom rxinferclient.models.ping_response import PingResponse\nfrom rxinferclient.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost:8000/v1\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = rxinferclient.Configuration(\n    host = \"http://localhost:8000/v1\"\n)\n\n\n# Enter a context with an instance of the API client\nwith rxinferclient.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = rxinferclient.ServerApi(api_client)\n\n    try:\n        # Health check endpoint\n        api_response = api_instance.ping_server()\n        print(\"The response of ServerApi-&gt;ping_server:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ServerApi-&gt;ping_server: %s\\n\" % e)\n</code></pre>"},{"location":"openapi/docs/ServerApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"openapi/docs/ServerApi/#return-type_1","title":"Return type","text":"<p>PingResponse</p>"},{"location":"openapi/docs/ServerApi/#authorization_1","title":"Authorization","text":"<p>No authorization required</p>"},{"location":"openapi/docs/ServerApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"openapi/docs/ServerApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Successfully pinged the server - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"openapi/docs/ServerInfo/","title":"ServerInfo","text":""},{"location":"openapi/docs/ServerInfo/#properties","title":"Properties","text":"Name Type Description Notes rxinfer_version str The version of RxInfer that the server is using, returns unknown if the version is unknown or hidden server_version str The version of the RxInferServer, returns unknown if the version is unknown or hidden server_edition str The edition of the RxInferServer, as set in RXINFER_EDITION environment variable julia_version str The version of Julia as presented in VERSION api_version str The version of the API being used default to 'v1'"},{"location":"openapi/docs/ServerInfo/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.server_info import ServerInfo\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ServerInfo from a JSON string\nserver_info_instance = ServerInfo.from_json(json)\n# print the JSON string representation of the object\nprint(ServerInfo.to_json())\n\n# convert the object into a dict\nserver_info_dict = server_info_instance.to_dict()\n# create an instance of ServerInfo from a dict\nserver_info_from_dict = ServerInfo.from_dict(server_info_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/SuccessResponse/","title":"SuccessResponse","text":""},{"location":"openapi/docs/SuccessResponse/#properties","title":"Properties","text":"Name Type Description Notes message str Success message"},{"location":"openapi/docs/SuccessResponse/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.success_response import SuccessResponse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SuccessResponse from a JSON string\nsuccess_response_instance = SuccessResponse.from_json(json)\n# print the JSON string representation of the object\nprint(SuccessResponse.to_json())\n\n# convert the object into a dict\nsuccess_response_dict = success_response_instance.to_dict()\n# create an instance of SuccessResponse from a dict\nsuccess_response_from_dict = SuccessResponse.from_dict(success_response_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/TokenGenerateResponse/","title":"TokenGenerateResponse","text":""},{"location":"openapi/docs/TokenGenerateResponse/#properties","title":"Properties","text":"Name Type Description Notes token str The token to use in the Authorization header with the format \\\"Bearer {token}\\\""},{"location":"openapi/docs/TokenGenerateResponse/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.token_generate_response import TokenGenerateResponse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of TokenGenerateResponse from a JSON string\ntoken_generate_response_instance = TokenGenerateResponse.from_json(json)\n# print the JSON string representation of the object\nprint(TokenGenerateResponse.to_json())\n\n# convert the object into a dict\ntoken_generate_response_dict = token_generate_response_instance.to_dict()\n# create an instance of TokenGenerateResponse from a dict\ntoken_generate_response_from_dict = TokenGenerateResponse.from_dict(token_generate_response_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/TokenRolesResponse/","title":"TokenRolesResponse","text":""},{"location":"openapi/docs/TokenRolesResponse/#properties","title":"Properties","text":"Name Type Description Notes roles List[str] List of roles for the token"},{"location":"openapi/docs/TokenRolesResponse/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.token_roles_response import TokenRolesResponse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of TokenRolesResponse from a JSON string\ntoken_roles_response_instance = TokenRolesResponse.from_json(json)\n# print the JSON string representation of the object\nprint(TokenRolesResponse.to_json())\n\n# convert the object into a dict\ntoken_roles_response_dict = token_roles_response_instance.to_dict()\n# create an instance of TokenRolesResponse from a dict\ntoken_roles_response_from_dict = TokenRolesResponse.from_dict(token_roles_response_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"openapi/docs/UnauthorizedResponse/","title":"UnauthorizedResponse","text":""},{"location":"openapi/docs/UnauthorizedResponse/#properties","title":"Properties","text":"Name Type Description Notes error str Error type, always \\\"Unauthorized\\\" for this error message str Detailed message explaining why authentication failed"},{"location":"openapi/docs/UnauthorizedResponse/#example","title":"Example","text":"<p><pre><code>from rxinferclient.models.unauthorized_response import UnauthorizedResponse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of UnauthorizedResponse from a JSON string\nunauthorized_response_instance = UnauthorizedResponse.from_json(json)\n# print the JSON string representation of the object\nprint(UnauthorizedResponse.to_json())\n\n# convert the object into a dict\nunauthorized_response_dict = unauthorized_response_instance.to_dict()\n# create an instance of UnauthorizedResponse from a dict\nunauthorized_response_from_dict = UnauthorizedResponse.from_dict(unauthorized_response_dict)\n</code></pre> [Back to Model list] [Back to API list] [Back to README]</p>"}]}